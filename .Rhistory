shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(forecast)
library(ForecastTB)
library(GlobalOptions)
library(gridExtra)
library(shape)
library(circlize)
library(PSF)
library(decomposedPSF)
test1 <- function(data, nval){
return(lpsf(data = data, n.ahead = nval))
}
test2 <- function(data, nval){
a <- psf(data = data, cycle = 12)
b <- predict(object = a, n.ahead = nval)
return(b)
}
a1 <- prediction_errors(data = nottem, nval = 12,
Method = c("ARIMA", "PSF"),
MethodName = c("ARIMA","PSF"),
append_ = 0)
test3 <- function(data, nval){
b <- as.numeric(forecast(ets(data), h = nval)$mean)
return(b)
}
c1 <- append_(object = a1, Method = c("test3(data,nval)"), MethodName = c('ETS'))
d1 <- plot(a1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(forecast)
library(ForecastTB)
library(GlobalOptions)
library(gridExtra)
library(shape)
library(circlize)
library(PSF)
library(decomposedPSF)
test1 <- function(data, nval){
return(lpsf(data = data, n.ahead = nval))
}
test2 <- function(data, nval){
a <- psf(data = data, cycle = 12)
b <- predict(object = a, n.ahead = nval)
return(b)
}
a1 <- prediction_errors(data = nottem, nval = 12,
Method = c("ARIMA", "PSF"),
MethodName = c("ARIMA","PSF"),
append_ = 0)
test3 <- function(data, nval){
b <- as.numeric(forecast(ets(data), h = nval)$mean)
return(b)
}
c1 <- append_(object = a1, Method = c("test3(data,nval)"), MethodName = c('ETS'))
d1 <- plot(a1)
test1
test1(data, nval)
"test1(data, nval)"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp('~/func4')
runApp()
View(test1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(dplyr)
runApp()
shiny::runApp()
library(broom)
library(dplyr)
install.packages("dbplyr", dependencies = FALSE)
runApp()
install.packages("dpblyr", dependencies = FALSE)
runApp()
shiny::runApp()
library(broom)
library(dplyr)
runApp()
library(tidyverse)
library(broom)
library(dplyr)
choices1 <- data.frame(methodsnames = c("ARIMA", "LPSF", "PSF", "ETS"),
methods= c("ARIMA", "test1(data, nval)", "test2(data, nval)", "test3(data, nval)"))
#c(names(choices1)[choices1 == "test3(data, nval)"], names(choices1)[choices1 == "test2(data, nval)"])
choices2 <- c("LPSF", "PSF", "ETS", "ARIMA")
# sameer <- names(choices1)[choices1 == choices2]
#
# sameer
# index <- choices1$methods == choices2
# choices1[index, ]$methodsnames
# index <- match(choices2, choices1$methodsnames)
# choices1[index, ]$methodsnames
# index
choices1 <- choices1 %>% add_row(methodsnames = "Nepal",methods = "india")
choices1
shiny::runApp()
runApp()
install.packages("dplyr", dependencies = FALSE)
shiny::runApp()
runApp()
library(forecast)
library(ForecastTB)
library(GlobalOptions)
library(gridExtra)
library(shape)
library(circlize)
library(PSF)
library(decomposedPSF)
test1 <- function(data, nval){
return(lpsf(data = data, n.ahead = nval))
}
test2 <- function(data, nval){
a <- psf(data = data, cycle = 12)
b <- predict(object = a, n.ahead = nval)
return(b)
}
test3 <- function(data, nval){
b <- as.numeric(forecast(ets(data), h = nval)$mean)
return(b)
}
choices1 <- c(ARIMA= "ARIMA", ETS = "test3(data, nval)", LPSF = "test1(data, nval)")
a1 <- prediction_errors(data = nottem, nval = 12,
Method = c(choices1),
MethodName = c(names(choices1)),
append_ = 0)
#c1 <- append_(object = a1, Method = c("test2(data,nval)"), MethodName = c('PSF'))
plot(a1)
a1@output
install.packages("DT", dependencies = FALSE)
runApp()
install.packages("htmlwidgets", dependencies = FALSE)
runApp()
install.packages("crosstalk", dependencies = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("lazyeval", dependencies = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
